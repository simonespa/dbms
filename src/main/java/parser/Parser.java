/* Generated By:JavaCC: Do not edit this line. Parser.java */
package parser;

import dataStructures.*;

public class Parser implements ParserConstants {

  public static void main(String args[]) throws ParseException {
    Parser parser = new Parser(System.in);
    while (true) {
      System.out.println("Reading from standard input...");
      try {
        Parser.query();
        System.out.println("Query successfully parsed!");
      } catch (Exception e) {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        Parser.ReInit(System.in);
      } catch (Error e) {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }

  static final public Query query() throws ParseException {
    Query q;
    System.out.print(">");
    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
      case SELECT:
        q = select();
        break;
      case INSERT:
        q = insert();
        break;
      case CREATE:
        q = createTable();
        break;
      case DROP:
        q = drop();
        break;
      case DELETE:
        q = delete();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
    }
    jj_consume_token(30);
    {
      if (true)
        return q;
    }
    throw new Error("Missing return statement in function");
  }

  static final public Select select() throws ParseException {
    Select select = new Select();
    String id, id2 = "", comparator;
    jj_consume_token(SELECT);
    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
        select.addField("*");
        break;
      case ID:
        jj_consume_token(ID);
        id = token.image;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
          case 31:
            jj_consume_token(31);
            jj_consume_token(ID);
            id = id + "." + token.image;
            break;
          default:
            jj_la1[1] = jj_gen;
            ;
        }
        select.addField(id);
        label_1: while (true) {
          switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case 32:
              ;
              break;
            default:
              jj_la1[2] = jj_gen;
              break label_1;
          }
          jj_consume_token(32);
          jj_consume_token(ID);
          id = token.image;
          switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case 31:
              jj_consume_token(31);
              jj_consume_token(ID);
              id = id + token.image;
              break;
            default:
              jj_la1[3] = jj_gen;
              ;
          }
          select.addField(id);
        }
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
    }
    jj_consume_token(FROM);
    jj_consume_token(ID);
    select.setTable(token.image);
    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
      case WHERE:
        jj_consume_token(WHERE);
        jj_consume_token(ID);
        id = token.image;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
          case 31:
            jj_consume_token(31);
            jj_consume_token(ID);
            id = id + token.image;
            break;
          default:
            jj_la1[5] = jj_gen;
            ;
        }
        jj_consume_token(COMPARE);
        comparator = token.image;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
          case ID:
            jj_consume_token(ID);
            id2 = token.image;
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
              case 31:
                jj_consume_token(31);
                jj_consume_token(ID);
                id2 = id2 + token.image;
                break;
              default:
                jj_la1[6] = jj_gen;
                ;
            }
            break;
          case BOOLEAN:
          case INT:
          case FLOAT:
          case STRING:
            id2 = constant();
            break;
          default:
            jj_la1[7] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        select.addWhereClause(id, comparator, id2);
        label_2: while (true) {
          switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case AND:
              ;
              break;
            default:
              jj_la1[8] = jj_gen;
              break label_2;
          }
          jj_consume_token(AND);
          jj_consume_token(ID);
          id = token.image;
          switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case 31:
              jj_consume_token(31);
              jj_consume_token(ID);
              id = id + token.image;
              break;
            default:
              jj_la1[9] = jj_gen;
              ;
          }
          jj_consume_token(COMPARE);
          comparator = token.image;
          switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case ID:
              jj_consume_token(ID);
              id2 = token.image;
              switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case 31:
                  jj_consume_token(31);
                  jj_consume_token(ID);
                  id2 = id2 + token.image;
                  break;
                default:
                  jj_la1[10] = jj_gen;
                  ;
              }
              break;
            case BOOLEAN:
            case INT:
            case FLOAT:
            case STRING:
              id2 = constant();
              break;
            default:
              jj_la1[11] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
          }
          select.addWhereClause(id, comparator, id2);
        }
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
    }
    {
      if (true)
        return select;
    }
    throw new Error("Missing return statement in function");
  }

  static final public Insert insert() throws ParseException {
    Insert query;
    String value;
    jj_consume_token(INSERT);
    jj_consume_token(INTO);
    jj_consume_token(ID);
    query = new Insert(token.image);
    jj_consume_token(VALUES);
    jj_consume_token(33);
    value = constant();
    query.addValue(value);
    label_3: while (true) {
      switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case 32:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_3;
      }
      jj_consume_token(32);
      value = constant();
      query.addValue(value);
    }
    jj_consume_token(34);
    {
      if (true)
        return query;
    }
    throw new Error("Missing return statement in function");
  }

  static final public Create createTable() throws ParseException {
    Create query;
    String id;
    jj_consume_token(CREATE);
    jj_consume_token(TABLE);
    jj_consume_token(ID);
    query = new Create(token.image);
    jj_consume_token(33);
    jj_consume_token(ID);
    id = token.image;
    jj_consume_token(DATATYPE);
    query.addField(id, DataType.valueOf(token.image));
    label_4: while (true) {
      switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case 32:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_4;
      }
      jj_consume_token(32);
      jj_consume_token(ID);
      id = token.image;
      jj_consume_token(DATATYPE);
      query.addField(id, DataType.valueOf(token.image));
    }
    jj_consume_token(34);
    {
      if (true)
        return query;
    }
    throw new Error("Missing return statement in function");
  }

  static final public Drop drop() throws ParseException {
    jj_consume_token(DROP);
    jj_consume_token(TABLE);
    jj_consume_token(ID);
    {
      if (true)
        return new Drop(token.image);
    }
    throw new Error("Missing return statement in function");
  }

  static final public Delete delete() throws ParseException {
    Delete query;
    String id, id2 = "", comparator;
    jj_consume_token(DELETE);
    jj_consume_token(FROM);
    jj_consume_token(ID);
    query = new Delete(token.image);
    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
      case WHERE:
        jj_consume_token(WHERE);
        jj_consume_token(ID);
        id = token.image;
        jj_consume_token(COMPARE);
        comparator = token.image;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
          case ID:
            jj_consume_token(ID);
            id2 = token.image;
            break;
          case BOOLEAN:
          case INT:
          case FLOAT:
          case STRING:
            id2 = constant();
            break;
          default:
            jj_la1[15] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        query.addWhereClause(id, comparator, id2);
        label_5: while (true) {
          switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case AND:
              ;
              break;
            default:
              jj_la1[16] = jj_gen;
              break label_5;
          }
          jj_consume_token(AND);
          jj_consume_token(ID);
          id = token.image;
          jj_consume_token(COMPARE);
          comparator = token.image;
          switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case ID:
              jj_consume_token(ID);
              id2 = token.image;
              break;
            case BOOLEAN:
            case INT:
            case FLOAT:
            case STRING:
              id2 = constant();
              break;
            default:
              jj_la1[17] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
          }
          query.addWhereClause(id, comparator, id2);
        }
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
    }
    {
      if (true)
        return query;
    }
    throw new Error("Missing return statement in function");
  }

  static final public String constant() throws ParseException {
    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
      case STRING:
        jj_consume_token(STRING);
        break;
      case FLOAT:
        jj_consume_token(FLOAT);
        break;
      case INT:
        jj_consume_token(INT);
        break;
      case BOOLEAN:
        jj_consume_token(BOOLEAN);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
    }
    {
      if (true)
        return token.image;
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[20];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
    jj_la1_0();
    jj_la1_1();
  }

  private static void jj_la1_0() {
    jj_la1_0 = new int[] { 0xd22000, 0x80000000, 0x0, 0x80000000, 0x20000020, 0x80000000, 0x80000000, 0x3e000000,
        0x10000, 0x80000000, 0x80000000, 0x3e000000, 0x8000, 0x0, 0x0, 0x3e000000, 0x10000, 0x3e000000, 0x8000,
        0x1e000000, };
  }

  private static void jj_la1_1() {
    jj_la1_1 = new int[] { 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x0, 0x0, 0x0,
        0x0, 0x0, };
  }

  public Parser(java.io.InputStream stream) {
    this(stream, null);
  }

  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try {
      jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
    } catch (java.io.UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++)
      jj_la1[i] = -1;
  }

  static public void ReInit(java.io.InputStream stream) {
    ReInit(stream, null);
  }

  static public void ReInit(java.io.InputStream stream, String encoding) {
    try {
      jj_input_stream.ReInit(stream, encoding, 1, 1);
    } catch (java.io.UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++)
      jj_la1[i] = -1;
  }

  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++)
      jj_la1[i] = -1;
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++)
      jj_la1[i] = -1;
  }

  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++)
      jj_la1[i] = -1;
  }

  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++)
      jj_la1[i] = -1;
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null)
      token = token.next;
    else
      token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static final public Token getNextToken() {
    if (token.next != null)
      token = token.next;
    else
      token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null)
        t = t.next;
      else
        t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt = token.next) == null)
      return (jj_ntk = (token.next = token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector<int[]> jj_expentries = new java.util.Vector<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[35];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 20; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1 << j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1 << j)) != 0) {
            la1tokens[32 + j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 35; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

}
