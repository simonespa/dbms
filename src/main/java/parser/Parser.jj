/**
 * JavaCC file
 */
 
options { 
  JDK_VERSION = "1.5";
  //STATIC=false;
}
PARSER_BEGIN(Parser)
package parser;
import dataStructures.*;

public class Parser {
  
  public static void main(String args[]) throws ParseException {
    Parser parser = new Parser(System.in);
    while (true) {
      System.out.println("Reading from standard input...");
      try {
        Parser.query();
        System.out.println("Query successfully parsed!");
      } catch (Exception e) {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        Parser.ReInit(System.in);
      } catch (Error e) {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
}
PARSER_END(Parser)

SKIP :
{
 	" "
|	"\r"
|	"\t"
|	"\n"
}
TOKEN : /* OPERATORS */
{
	<STAR :"*">	
| 	<COMPARE: <E>|<AE>|<BE>|<NE>|<A>|<B> >
| 	<#E: "=">
| 	<#AE: ">=">
| 	<#BE: "<=">
| 	<#NE: "<>">	
| 	<#A: ">">
| 	<#B: "<">
|	< SELECT: "Select" | "select" | "SELECT" >
|	<FROM: "From"|"from"| "FROM">	
| 	<WHERE: "Where"|"where"|"WHERE">
|	<AND: "And"|"and"|"AND">
|	<INSERT: "Insert" |"insert" |"INSERT">
|	<INTO: "Into"|"into" |"INTO">
| 	<VALUES:"Values"|"values"|"VALUES" >
|	<CREATE: "Create" |"create" | "CREATE">
|	<TABLE: "Table"|"table"|"TABLE">
| 	<DROP: "Drop"| "drop" |"DROP" >
|	<DELETE: "Delete"| "delete"| "DELETE"> 	 
|	<DATATYPE: "INTEGER" | "STRING" | "BOOLEAN" >
|	<BOOLEAN: "true"|"false">
|	<INT: ["1"-"9"] (["0"-"9"])* >
|	<FLOAT:(["0"-"9"])+ "." (["0"-"9"])+ >
|  	<STRING: "\""(["A"-"Z","a"-"z","0"-"9", "_"])+"\"">
| 	<ID: (["A"-"Z","a"-"z"])(["A"-"Z","a"-"z","0"-"9", "_"])*>
}

Query query() : {Query q;}
{
	{System.out.print(">");}
  (q=select()|q=insert()|q=createTable()|q=drop()|q=delete())";"
	{return q;}
}
Select select() : {
	Select select=new Select();
	String id,id2="",comparator;
	}
{
	<SELECT> 
	(<STAR>{select.addField("*");}|((<ID>{id=token.image;}("."<ID>{id=id+"."+token.image;})?){select.addField(id);}(","<ID>{id=token.image;}("."<ID>{id=id+token.image;})?{select.addField(id);})*)) 
	<FROM> <ID>{select.setTable(token.image);}//(","<ID>{select.addTable(token.image);})* 
	(<WHERE> <ID>{id=token.image;}("."<ID>{id=id+token.image;})?<COMPARE>{comparator=token.image;}(<ID>{id2=token.image;}("."<ID>{id2=id2+token.image;})?|id2=constant()) {select.addWhereClause(id,comparator,id2);}
	(<AND> <ID>{id=token.image;}("."<ID>{id=id+token.image;})?<COMPARE>{comparator=token.image;}(<ID>{id2=token.image;}("."<ID>{id2=id2+token.image;})?|id2=constant()){select.addWhereClause(id,comparator,id2);})*)?
	{return select;}
}
Insert insert() : {Insert query;String value;}
{
	<INSERT><INTO> <ID>{query=new Insert(token.image);}<VALUES>"("value=constant(){query.addValue(value);}(","value=constant(){query.addValue(value);} )* ")"
	{return query;}
}
Create createTable() : 
{
	Create query;
	String id;	 
}
{
	<CREATE><TABLE><ID>{query=new Create(token.image);}
	"("<ID>{id=token.image;}<DATATYPE>{query.addField(id,DataType.valueOf(token.image));}(","<ID>{id=token.image;}<DATATYPE>{query.addField(id,DataType.valueOf(token.image));})*")"
	{return query;}
}
Drop drop() : {}
{
	<DROP><TABLE><ID>{return new Drop(token.image);}
}
Delete delete() : {
	Delete query;
	String id,id2="",comparator;
	}
{
	<DELETE><FROM> <ID> {query=new Delete(token.image);}
	(
	<WHERE> <ID>{id=token.image;}<COMPARE>{comparator=token.image;}(<ID>{id2=token.image;}|id2=constant()){ query.addWhereClause(id,comparator,id2);}
	(<AND> <ID>{id=token.image;}<COMPARE>{comparator=token.image;}(<ID>{id2=token.image;}|id2=constant()){ query.addWhereClause(id,comparator,id2);})*
	)?
	
	{return query;}
}
String constant():{}{
	(<STRING>|<FLOAT>|<INT>|<BOOLEAN>)
	{return token.image;}
}
